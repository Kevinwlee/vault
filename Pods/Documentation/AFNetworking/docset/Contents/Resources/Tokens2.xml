<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFHTTPRequestOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFHTTPRequestOperation</TokenIdentifier>
			<Abstract type="html">AFHTTPRequestOperation is a subclass of AFURLConnectionOperation for requests using the HTTP or HTTPS protocols. It encapsulates the concept of acceptable status codes and content types, which determine the success or failure of a request.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPRequestOperation/setResponse:</TokenIdentifier>
			<Abstract type="html">The last HTTP response received by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSHTTPURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPRequestOperation/response</TokenIdentifier>
			<Abstract type="html">The last HTTP response received by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSHTTPURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPRequestOperation/response</TokenIdentifier>
			<Abstract type="html">The last HTTP response received by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSHTTPURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPRequestOperation/setResponseSerializer:</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to a compound serializer, which serializes data from responses with either a application/json or application/x-plist MIME type, and falls back to the raw data object. The serializer validates the status code to be in the 2XX range, denoting success. If the response serializer generates an error in -responseObjectForResponse:data:error:, the failure callback of the session task or request operation will be executed; otherwise, the success callback will be executed.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPResponseSerializer&lt;AFURLResponseSerialization&gt; *responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPRequestOperation/responseSerializer</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to a compound serializer, which serializes data from responses with either a application/json or application/x-plist MIME type, and falls back to the raw data object. The serializer validates the status code to be in the 2XX range, denoting success. If the response serializer generates an error in -responseObjectForResponse:data:error:, the failure callback of the session task or request operation will be executed; otherwise, the success callback will be executed.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPResponseSerializer&lt;AFURLResponseSerialization&gt; *responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPRequestOperation/responseSerializer</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to a compound serializer, which serializes data from responses with either a application/json or application/x-plist MIME type, and falls back to the raw data object. The serializer validates the status code to be in the 2XX range, denoting success. If the response serializer generates an error in -responseObjectForResponse:data:error:, the failure callback of the session task or request operation will be executed; otherwise, the success callback will be executed.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPResponseSerializer&lt;AFURLResponseSerialization&gt; *responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPRequestOperation/setCompletionBlockWithSuccess:failure:</TokenIdentifier>
			<Abstract type="html">Sets the completionBlock property with a block that executes either the specified success or failure block, depending on the state of the request on completion. If error returns a value, which can be caused by an unacceptable status code or content type, then failure is executed. Otherwise, success is executed.</Abstract>
			<DeclaredIn>AFHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>- (void)setCompletionBlockWithSuccess:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">The block to be executed on the completion of a successful request. This block has no return value and takes two arguments: the receiver operation and the object constructed from the response data of the request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">The block to be executed on the completion of an unsuccessful request. This block has no return value and takes two arguments: the receiver operation and the error that occurred during the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCompletionBlockWithSuccess:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>